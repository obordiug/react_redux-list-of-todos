{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialValue","query","status","value","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","useState","visibleTodos","setVisibleTodos","dispatch","useEffect","todosStatus","completed","title","includes","getVisibleTodos","length","className","map","classNames","id","onClick","currentTodoActions","setTodo","TodoFilter","changeQuery","filterActions","onSubmit","event","preventDefault","name","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","userId","userFromServer","href","App","isLoaded","setIsLoaded","todosFromServer","todosActions","error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ce7333c.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodo, removeTodo };\nexport default currentTodoReducer;\n","type ChangeStatusAction = { type: 'filter/STATUS', payload: string };\ntype ChangeQueryAction = { type: 'filter/QUERY', payload: string };\n\ntype Action = ChangeStatusAction | ChangeQueryAction;\n\nconst changeStatus = (value: string): ChangeStatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst changeQuery = (value: string): ChangeQueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\ntype Initial = {\n  query: string,\n  status: string,\n};\n\nconst initialValue: Initial = { query: '', status: 'all' };\n\nconst filterReducer = (\n  filter: Initial = initialValue,\n  action: Action,\n): Initial => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...filter, status: action.payload };\n    case 'filter/QUERY':\n      return { ...filter, query: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport const actions = { changeStatus, changeQuery };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodosAction = { type: 'todos/GET', payload: Todo[] };\ntype Action = GetTodosAction;\n\nconst getTodos = (todos: Todo[]): GetTodosAction => ({\n  type: 'todos/GET',\n  payload: todos,\n});\n\nconst todosReducer = (\n  todos: Todo[] = [], action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/GET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { getTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const getVisibleTodos = () => {\n    let todosStatus;\n\n    switch (status) {\n      case 'active':\n        todosStatus = todos.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        todosStatus = todos.filter(todo => todo.completed);\n        break;\n      default:\n        todosStatus = todos;\n    }\n\n    return todosStatus.filter(todo => todo.title.includes(query));\n  };\n\n  useEffect(() => {\n    setVisibleTodos(getVisibleTodos());\n  }, [status, query]);\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  return (\n    <>\n      {\n        visibleTodos.length === 0\n          ? (\n            <p className=\"notification is-warning\">\n              There are no todos matching current filter criteria\n            </p>\n          )\n          : (\n            <table className=\"table is-narrow is-fullwidth\">\n              <thead>\n                <tr>\n                  <th>#</th>\n\n                  <th>\n                    <span className=\"icon\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </th>\n\n                  <th>Title</th>\n                  <th> </th>\n                </tr>\n              </thead>\n              <tbody>\n                {visibleTodos.map(todo => (\n                  <tr\n                    data-cy=\"todo\"\n                    key={todo.id}\n                    className={classNames(\n                      { 'has-background-info-light': todo.id === currentTodo?.id },\n                    )}\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames(\n                        { 'has-text-danger': !todo.completed },\n                        { 'has-text-success': todo.completed },\n                      )}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => setTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames(\n                            'far',\n                            {\n                              'far fa-eye': todo.id !== currentTodo?.id,\n                              'fa-eye-slash': todo.id === currentTodo?.id,\n                            },\n                          )}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )\n      }\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const changeStatus = (\n    value: string,\n  ) => dispatch(filterActions.changeStatus(value));\n\n  const changeQuery = (\n    value: string,\n  ) => dispatch(filterActions.changeQuery(value));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            name=\"status\"\n            value={status}\n            onChange={(e) => changeStatus(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => changeQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => changeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(userFromServer => setUser(userFromServer));\n    }\n  }, [currentTodo]);\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div\n      className={classNames('modal', { 'is-active': currentTodo })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      { !user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo # ${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => removeTodo()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={classNames(\n                    {\n                      'has-text-danger': currentTodo?.completed,\n                      'has-text-success': currentTodo?.completed,\n                    },\n                  )}\n                >\n                  { currentTodo?.completed ? 'Done' : 'Planned' }\n                </strong>\n                {' by '}\n                <a href=\"mailto:Sincere@april.biz\">{user.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    try {\n      getTodos()\n        .then(todosFromServer => {\n          dispatch(todosActions.getTodos(todosFromServer));\n          setIsLoaded(true);\n        });\n    } catch (error) {\n      setIsLoaded(false);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                !isLoaded\n                  ? <Loader />\n                  : <TodoList />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <TodoModal />\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}